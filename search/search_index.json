{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"fairscape-cli","text":"<p>A utility for packaging digital objects and validating their metadata for the FAIRSCAPE ecosystem.</p>"},{"location":"#features","title":"Features","text":"<p>fairscape-cli provides a Command Line Interface (CLI) that allows the client side to create:</p> <ul> <li>RO-Crate - a light-weight approach to packaging research data with their metadata. The CLI allows users to:<ul> <li>Create Research Object Crates (RO-Crates)</li> <li>Add (transfer) digital objects to the RO-Crate</li> <li>Register metadata of the objects</li> <li>Describe schema of dataset objects (CSV, TSV) as metadata and perform shallow validation.    </li> </ul> </li> <li>BagIt - a packaging format for storing and transferring digital content in a <code>Bag</code> from an existing RO-Crate. This is an experimental feature where the CLI allows users to create a BagIt by creating:<ul> <li>a required element payload directory <code>data/</code> containing digital content (i.e. objects in RO-Crate)</li> <li>a required element bag declaration <code>bag.txt</code> containing the version and encoding information </li> <li>a required element payload manifest <code>manifest-algorithm.txt</code> containing checksum and file path</li> <li>an optional element bag metadata <code>bag-info.txt</code> containing reserved metadata elements as key, value pairs.</li> <li>an optional element tag manifest <code>tagmanifest-algorithm.txt</code> containing checksum.</li> </ul> </li> </ul> <p>Note</p> <p>The prerequisite of creating a BagIt is to create an RO-Crate. The FAIRSCAPE ecosystem  currently accepts reserved metadata elements that are generated when an RO-Crate is created by the CLI. Therefore, supporting BagIt will become easier in the future when the  metadata is also included.  </p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#ro-crate","title":"RO-Crate","text":"<p>The interface uses the <code>fairscape-cli</code> root command to invoke all sub-commands. All RO-Crate operations are invoked using the <code>rocrate</code> sub-command.</p>"},{"location":"getting-started/#create-ro-crate","title":"Create RO-Crate","text":"<p>An RO-Crate can be created either by the <code>create</code> or <code>init</code> sub-command. While <code>create</code> allows users to choose the destination directory using the <code>ROCRATE_PATH</code> argument, <code>init</code> creates the RO-Crate in the present working directory. Both commands use one optional parameter <code>guid</code>, five required parameters <code>name</code>, <code>description</code>, <code>keywords</code>, <code>organization-name</code>, and <code>project-name</code>.</p> <pre><code>fairscape-cli rocrate create [OPTIONS] ROCRATE_PATH\n\nOptions:\n  --guid TEXT\n  --name TEXT               [required]\n  --description TEXT        [required]\n  --keywords TEXT           [required]\n  --organization-name TEXT  [required]\n  --project-name TEXT       [required]\n</code></pre> <p>The following command will create an RO-Crate with a minimal set of metadata. A file <code>ro-crate-metadata.json</code> containing the metadata is created in the path specified as the value of the argument <code>ROCRATE_PATH</code>. A unique identifier is generated automatically to represent the RO-Crate. </p> <pre><code>fairscape-cli rocrate create \\\n  --name \"test rocrate\" \\\n  --description \"Example RO Crate for Tests\" \\\n  --keywords \"b2ai\" \\\n  --keywords \"cm4ai\" \\\n  --keywords \"U2OS\" \\\n  --organization-name \"UVA\" \\\n  --project-name \"B2AI\"  \\\n  \"/path/to/test_rocrate\"\n</code></pre> <p>For a given identifier, the option <code>guid</code> is used as follows: </p> <pre><code>fairscape-cli rocrate create \\\n  --guid \"ark:59852/UVA/B2AI/test_rocrate\" \\\n  --name \"test rocrate\" \\\n  --description \"Example RO Crate for Tests\" \\\n  --keywords \"b2ai\" \\\n  --keywords \"cm4ai\" \\\n  --keywords \"U2OS\" \\\n  --organization-name \"UVA\" \\\n  --project-name \"B2AI\"  \\\n  \"/path/to/test_rocrate\"\n</code></pre> <p>As as alternative, <code>fairscape-cli rocrate init</code> command below creates the same RO-Crate in the present working directory. </p> <pre><code>fairscape-cli rocrate init \\\n  --guid \"ark:59852/UVA/B2AI/test_rocrate\" \\\n  --name \"test rocrate\" \\\n  --description \"Example RO Crate for Tests\" \\\n  --keywords \"b2ai\" \\\n  --keywords \"cm4ai\" \\\n  --keywords \"U2OS\" \\\n  --organization-name \"UVA\" \\\n  --project-name \"B2AI\"\n</code></pre>"},{"location":"getting-started/#add-object","title":"Add object","text":"<p>The FAIRSCAPE ecosystem treats datasets and software as objects. Adding objects to an RO-Crate is performed by the <code>add</code> sub-command. Whenever the <code>add</code> command is used, the object is fetched and transferred to the crate.</p> <pre><code>Usage: fairscape-cli rocrate add [OPTIONS] COMMAND [ARGS]...\n\n  Add (transfer) object to RO-Crate and register object metadata.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  dataset   Add Dataset object and metadata.\n  software  Add Software object and metadata.\n</code></pre>"},{"location":"getting-started/#dataset-object","title":"Dataset object","text":"<p>The sub-command <code>dataset</code> is used to add a dataset. It uses eight required parameters <code>name</code>, <code>author</code>, <code>version</code>, <code>date-published</code>, <code>description</code>, <code>data-format</code>, <code>source-filepath</code>, and <code>destination-filepath</code>. The additional six parameters are optional. Metadata about the dataset are added to the <code>ro-crate-metadata.json</code> and the dataset object is transferred to the location specified by <code>ROCRATE_PATH</code>. </p> <pre><code>fairscape-cli rocrate add dataset [OPTIONS] ROCRATE_PATH\n\nOptions:\n  --guid TEXT\n  --name TEXT                     [required]\n  --url TEXT\n  --author TEXT                   [required]\n  --version TEXT                  [required]\n  --date-published TEXT           [required]\n  --description TEXT              [required]\n  --keywords TEXT                 [required]\n  --data-format TEXT              [required]\n  --source-filepath TEXT          [required]\n  --destination-filepath TEXT     [required]\n  --used-by TEXT\n  --derived-from TEXT\n  --associated-publication TEXT\n  --additional-documentation TEXT\n</code></pre> <p>The <code>add dataset</code> sub-command below uses the required options to add a dataset object to the crate and populate the associated metadata within the metadata file <code>ro-crate-metadata.json</code>. A unique identifier is generated automatically to represent the dataset. </p> <pre><code>fairscape-cli rocrate add dataset \\\n  --name \"AP-MS embeddings\" \\\n  --author \"Gygi lab (https://gygi.hms.harvard.edu/team.html)\" \\\n  --version \"1.0\" \\\n  --date-published \"2021-04-23\" \\\n  --description \"Affinity purification mass spectrometer (APMS) embeddings for each protein in the study,  generated by node2vec predict.\" \\\n  --keywords \"b2ai\" \\\n  --keywords \"cm4ai\" \\\n  --keywords \"U2OS\" \\\n  --data-format \"CSV\" \\\n  --source-filepath \"./tests/data/APMS_embedding_MUSIC.csv\" \\\n  --destination-filepath \"/path/to/test_rocrate\" \\\n  \"/path/to/test_rocrate\"\n</code></pre> <p>The following command performs the same operation using both required and optional parameters:</p> <pre><code>fairscape-cli rocrate add dataset \\\n  --guid \"ark:5982/UVA/B2AI/example_rocrate/AP-MS_embeddings-Dataset\" \\\n  --name \"AP-MS embeddings\" \\\n  --url \"https://github.com/idekerlab/MuSIC/blob/master/Examples/APMS_embedding.MuSIC.csv\" \\\n  --author \"Gygi lab (https://gygi.hms.harvard.edu/team.html)\" \\\n  --version \"1.0\" \\\n  --date-published \"2021-04-23\" \\\n  --description \"Affinity purification mass spectrometer (APMS) embeddings for each protein in the study,  generated by node2vec predict.\" \\\n  --keywords \"b2ai\" \\\n  --keywords \"cm4ai\" \\\n  --keywords \"U2OS\" \\\n  --data-format \"CSV\" \\\n  --source-filepath \"./tests/data/APMS_embedding_MUSIC.csv\" \\\n  --destination-filepath \"/path/to/test_rocrate\" \\\n  --used-by \"create labeled training &amp; test sets  random_forest_samples.py\" \\\n  --derived-from \"node2vec predict\" \\\n  --associated-publication \"Qin, Y. et al. A multi-scale map of cell structure fusing protein images and interactions\" \\\n  --additional-documentation \"https://idekerlab.ucsd.edu/music/\" \\\n  \"/path/to/test_rocrate\"\n</code></pre> <p><code>fairscape-cli</code> offers a feature to annotate certain types of dataset objects with schema-level metadata. The examples in Schema Metadata illustrate how to describe schema of a dataset object as metadata. A mechanism to validate the metadata against the object is a part of this feature.</p>"},{"location":"getting-started/#software-object","title":"Software object","text":"<p>The sub-command <code>software</code> is used to add a software object. It uses eight required parameters <code>name</code>, <code>author</code>, <code>version</code>, <code>description</code>, <code>file-format</code>, <code>source-filepath</code>, <code>destination-filepath</code>, and <code>date-modified</code>. The additional five parameters are optional. Metadata about the software are added to the <code>ro-crate-metadata.json</code> and the software object is transferred to the location specified by <code>ROCRATE_PATH</code>. </p> <pre><code>fairscape-cli rocrate add software [OPTIONS] ROCRATE_PATH\n\nOptions:\n  --guid TEXT\n  --name TEXT                     [required]\n  --author TEXT                   [required]\n  --version TEXT                  [required]\n  --description TEXT              [required]\n  --keywords TEXT                 [required]\n  --file-format TEXT              [required]\n  --url TEXT\n  --source-filepath TEXT          [required]\n  --destination-filepath TEXT     [required]\n  --date-modified TEXT            [required]\n  --used-by-computation TEXT\n  --associated-publication TEXT\n  --additional-documentation TEXT\n</code></pre> <p>The <code>add software</code> sub-command below uses the required options to add a software object to the crate and populate the associated metadata within the metadata file <code>ro-crate-metadata.json</code>. A unique identifier is generated automatically to represent the software. </p> <pre><code>fairscape-cli rocrate add software \\\n  --name \"calibrate pairwise distance\" \\\n  --author \"Qin, Y.\" \\\n  --version \"1.0\" \\\n  --description \"script written in python to calibrate pairwise distance.\" \\\n  --keywords \"b2ai\" \\\n  --keywords \"cm4ai\" \\\n  --keywords \"U2OS\" \\\n  --file-format \"py\" \\\n  --source-filepath \"./tests/data/calibrate_pairwise_distance.py\" \\\n  --destination-filepath \"/path/to/test_rocrate\" \\\n  --date-modified \"2021-04-23\" \\\n  \"/path/to/test_rocrate\"\n</code></pre> <p>The following command performs the same operation using both required and optional parameters:</p> <pre><code>fairscape-cli rocrate add software \\\n  --guid \"ark:5982/UVA/B2AI/example_rocrate/calibrate_pairwise_distance-Software\" \\\n  --name \"calibrate pairwise distance\" \\\n  --author \"Qin, Y.\" \\\n  --version \"1.0\" \\\n  --description \"Affinity purification mass spectrometer (APMS) embeddings for each protein in the study,  generated by node2vec predict.\" \\\n  --keywords \"b2ai\" \\\n  --keywords \"U2OS\" \\\n  --file-format \"py\" \\\n  --url \"https://github.com/idekerlab/MuSIC/blob/master/calibrate_pairwise_distance.py\" \\\n  --source-filepath \"./tests/data/calibrate_pairwise_distance.py\" \\\n  --destination-filepath \"/path/to/test_rocrate\" \\\n  --date-modified \"2021-06-20\" \\\n  --used-by-computation \"ARK:compute_standard_proximities.1/f9aa5f3f-665a-4ab9-8879-8d0d52f05265\" \\\n  --associated-publication \"Qin, Y. et al. A multi-scale map of cell structure fusing protein images and interactions. Nature 600, 536\u2013542 2021\" \\\n  --additional-documentation \"https://idekerlab.ucsd.edu/music/\" \\\n  \"/path/to/test_rocrate\"\n</code></pre>"},{"location":"getting-started/#register-object-metadata","title":"Register object metadata","text":"<p>The sub-command <code>register</code> is used to add metadata of the components of an RO-Crate to <code>ro-crate-metadata.json</code>. Registration can be performed on instances of: <code>computation</code>, <code>dataset</code>, and <code>software</code>. </p> <p>The sub-commands <code>add dataset</code> and <code>add software</code> described above issue implicit calls to methods that register metadata about the dataset and software, respectively.</p> <p>The following command shows the sub-commands for registering each component:</p> <pre><code>fairscape-cli rocrate register [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  computation\n  dataset\n  dataset-container  Add a DatasetContainer to the ROCrate.\n  softwares\n</code></pre>"},{"location":"getting-started/#computation-metadata","title":"Computation metadata","text":"<p>The FAIRSCAPE ecosystem considers computation as an activity, unlike datasets and software that are treated as objects. To register a computation, it must be added to the RO-Crate metadata using the <code>register computation</code> sub-command. This command requires five mandatory parameters: <code>name</code>, <code>run-by</code>, <code>date-created</code>, <code>description</code>, and <code>keywords</code>. There are also five optional parameters that can be included. </p> <p>Once the command is executed, metadata about the computation is added to the <code>ro-crate-metadata.json</code> file located in <code>ROCRATE_PATH</code>. To view all available options and arguments for registering metadata about the computation, execute the following command.</p> <pre><code>fairscape-cli rocrate register computation [OPTIONS] ROCRATE_PATH\n\nOptions:\n  --guid TEXT\n  --name TEXT           [required]\n  --run-by TEXT         [required]\n  --command TEXT\n  --date-created TEXT   [required]\n  --description TEXT    [required]\n  --keywords TEXT       [required]\n  --used-software TEXT\n  --used-dataset TEXT\n  --generated TEXT\n</code></pre> <p>The following <code>register computation</code> sub-command is designed to populate the metadata of a computation within the <code>ro-crate-metadata.json</code> file using only the necessary options. Additionally, a unique identifier is generated automatically to represent the computation. </p> <pre><code>fairscape-cli rocrate register computation \\\n  --name \"calibrate pairwise distance\" \\\n  --run-by \"Qin, Y.\" \\\n  --date-created \"2021-05-23\" \\\n  --description \"Average the predicted proximities\" \\\n  --keywords \"b2ai\" \\\n  --keywords \"cm4ai\" \\\n  --keywords \"U2OS\" \\\n  \"/path/to/test_rocrate\"\n</code></pre> <p>Execute the following command to use all available options and argument for registering a computation: </p> <pre><code>fairscape-cli rocrate register computation \\\n  --guid \"ark:5982/UVA/B2AI/test_rocrate/calibrate_pairwise_distance-Computation\" \\\n  --name \"calibrate pairwise distance\" \\\n  --run-by \"Qin, Y.\" \\\n  --command \"some command\" \\\n  --date-created \"2021-05-23\" \\\n  --description \"Average the predicted proximities\" \\\n  --keywords \"b2ai\" \\\n  --keywords \"clustering\" \\\n  --used-software \"random_forest_output (https://github.com/idekerlab/MuSIC/blob/master/random_forest_output.py)\" \\\n  --used-dataset \"IF_emd_1_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_1.pkl\" \\\n  --used-dataset \"IF_emd_2_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_1.pkl\" \\\n  --used-dataset \"IF_emd_1_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_2.pkl\" \\\n  --used-dataset \"IF_emd_2_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_2.pkl\" \\\n  --used-dataset \"\"\"Fold 1 proximities: IF_emd_1_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_3.pkl\"\"\" \\\n  --used-dataset \"IF_emd_2_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_3.pkl\" \\\n  --used-dataset \"\"\"Fold 1 proximities: IF_emd_1_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_4.pkl\"\"\" \\\n  --used-dataset \"IF_emd_2_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_4.pkl\" \\\n  --used-dataset \"\"\"Fold 1 proximities: IF_emd_1_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_5.pkl\"\"\" \\\n  --used-dataset \"IF_emd_2_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_5.pkl\" \\\n  --generated \"averages of predicted protein proximities (https://github.com/idekerlab/MuSIC/blob/master/Examples/MuSIC_predicted_proximity.txt)\" \\\n  \"/path/to/test_rocrate\"\n</code></pre>"},{"location":"getting-started/#dataset-metadata","title":"Dataset metadata","text":"<p>To register a dataset, you can use the <code>register dataset</code> sub-command, which requires the <code>filepath</code> option to specify the source file path. This command adds metadata about the dataset to the <code>ro-crate-metadata.json</code> file in the <code>ROCRATE_PATH</code> directory.</p> <p>To view all available options and arguments for registering metadata about the computation, execute the following command.</p> <pre><code>fairscape-cli rocrate register dataset [OPTIONS] ROCRATE_PATH\n\nOptions:\n  --guid TEXT\n  --name TEXT                     [required]\n  --url TEXT\n  --author TEXT                   [required]\n  --version TEXT                  [required]\n  --date-published TEXT           [required]\n  --description TEXT              [required]\n  --keywords TEXT                 [required]\n  --data-format TEXT              [required]\n  --filepath TEXT                 [required]\n  --used-by TEXT\n  --derived-from TEXT\n  --associated-publication TEXT\n  --additional-documentation TEXT\n</code></pre> <p>Execute the following command to use all available options and argument for registering a dataset:</p> <pre><code>fairscape-cli rocrate register dataset \\\n  --guid \"ark:5982/UVA/B2AI/example_rocrate/AP-MS_embeddings-Dataset\" \\\n  --name \"AP-MS embeddings\" \\\n  --url \"https://github.com/idekerlab/MuSIC/blob/master/Examples/APMS_embedding.MuSIC.csv\" \\\n  --author \"Gygi lab (https://gygi.hms.harvard.edu/team.html)\" \\\n  --version \"1.0\" \\\n  --date-published \"2021-04-23\" \\\n  --description \"Affinity purification mass spectrometer (APMS) embeddings for each protein in the study,  generated by node2vec predict.\" \\\n  --keywords \"apms\" \\\n  --keywords \"b2ai\" \\\n  --keywords \"cm4ai\" \\\n  --data-format \"CSV\" \\\n  --filepath \"./tests/data/APMS_embedding_MUSIC.csv\" \\\n  --used-by \"create labeled training &amp; test sets  random_forest_samples.py\" \\\n  --derived-from \"node2vec predict\" \\\n  --associated-publication \"Qin, Y. et al. A multi-scale map of cell structure fusing protein images and interactions\" \\\n  --additional-documentation \"https://idekerlab.ucsd.edu/music/\" \\\n  \"/path/to/test_rocrate\"\n</code></pre>"},{"location":"getting-started/#software-metadata","title":"Software metadata","text":"<p>Similarly, to register software, you can use the <code>register software</code> sub-command, which also requires the <code>filepath</code> option to specify the source file path. This command adds metadata about the software to the same <code>ro-crate-metadata.json</code> file in the <code>ROCRATE_PATH</code> directory. </p> <p>To view all available options and arguments for registering metadata about the computation, execute the following command.</p> <pre><code>fairscape-cli rocrate register software [OPTIONS] ROCRATE_PATH\n\nOptions:\n  --guid TEXT\n  --name TEXT                     [required]\n  --author TEXT                   [required]\n  --version TEXT                  [required]\n  --description TEXT              [required]\n  --keywords TEXT                 [required]\n  --file-format TEXT              [required]\n  --url TEXT\n  --date-modified TEXT\n  --filepath TEXT\n  --used-by-computation TEXT\n  --associated-publication TEXT\n  --additional-documentation TEXT\n</code></pre> <p>Execute the following command to use all available options and argument for registering a software:</p> <pre><code>fairscape-cli rocrate register software \\\n  --guid \"ark:5982/UVA/B2AI/example_rocrate/calibrate_pairwise_distance-Software\" \\\n  --name \"calibrate pairwise distance\" \\\n  --author \"Qin, Y.\" \\\n  --version \"1.0\" \\\n  --description \"Affinity purification mass spectrometer (APMS) embeddings for each protein in the study,  generated by node2vec predict.\" \\\n  --file-format \"py\" \\\n  --url \"https://github.com/idekerlab/MuSIC/blob/master/calibrate_pairwise_distance.py\" \\\n  --filepath \"./tests/data/calibrate_pairwise_distance.py\" \\\n  --date-modified \"2021-06-20\" \\\n  --used-by-computation \"ARK:compute_standard_proximities.1/f9aa5f3f-665a-4ab9-8879-8d0d52f05265\" \\\n  --associated-publication \"Qin, Y. et al. A multi-scale map of cell structure fusing protein images and interactions. Nature 600, 536\u2013542 2021\" \\\n  --additional-documentation \"https://idekerlab.ucsd.edu/music/\" \\\n  \"/path/to/test_rocrate\"\n</code></pre>"},{"location":"getting-started/#bagit","title":"BagIt","text":"<p>The CLI supports creating BagIt from an existing RO-Crate. Integration of BagIt with repositories such as Dataverse and Library of Congress indicates its increasing use as a mechanism for transferring and storing digital content. The structure of a BagIt is simple to understand and the integrity of its contents can be easily validated. There is a clear separation of contents, metadata and checksum values.  </p>"},{"location":"getting-started/#structure","title":"Structure","text":"<p>A BagIt created by the CLI has the following structure that are described in detail in the specification. By default, a BagIt created by the CLI contains <code>bag-info.txt</code> for metadata, <code>bag.txt</code> specifying the version and encoding, three files titled <code>manifest-[algorithm].txt</code> for validating digital contents, and three <code>tagmanifest-[algorithm].txt</code> files for validating the rest of the files in a <code>Bag</code> other than the contents. Each <code>algorithm</code> is an instance of the MD5, SHA-256 and SHA-512 hash algorithms for generating checksum.</p> <pre><code>&lt;base directory&gt;/\n   |\n   +-- bag-info.txt\n   |\n   +-- bagit.txt\n   |\n   +-- manifest-md5.txt\n   |\n   +-- manifest-sha256.txt\n   |\n   +-- manifest-sha512.txt\n   |\n   +-- tagmanifest-md5.txt\n   |\n   +-- tagmanifest-sha256.txt \n   |\n   +-- tagmanifest-sha512.txt \n   |\n   +-- data/\n   |     |\n   |     +-- [payload files]\n</code></pre>"},{"location":"getting-started/#create-bagit","title":"Create BagIt","text":"<p>Creating a BagIt requires a user to submit information about the metadata, an exising RO-Crate location as <code>ROCRATE_PATH</code>, and the target location of the BagIt as <code>BAGIT_PATH</code>. The options below list all the six metadata keyword required to create a BagIt.  </p> <pre><code>fairscape-cli rocrate package bagit [OPTIONS] ROCRATE_PATH BAGIT_PATH\n\nOptions:\n  --Source-Organization TEXT   [required]\n  --Organization-Address TEXT  [required]\n  --Contact-Name TEXT          [required]\n  --Contact-Phone TEXT         [required]\n  --Contact-Email TEXT         [required]\n  --External-Description TEXT  [required]\n</code></pre>"},{"location":"getting-started/#example","title":"Example","text":"<p>The following command creates a BagIt in <code>/path/to/test_bagit</code> form an existing RO-Crate in <code>/path/to/test_rocrate</code>.</p> <pre><code>fairscape-cli rocrate package bagit \\\n   \"/path/to/test_rocrate\" \\\n   \"/path/to/test_bagit\" \\\n   --Source-Organization \"FOO University\" \\\n   --Organization-Address \"1 Main St., Cupertino, California, 11111\" \\\n   --Contact-Name \"Jane Doe\" \\\n   --Contact-Phone \"+1 111-111-1111\" \\\n   --Contact-Email \"example@example.com\" \\\n   --External-Description \"Uncompressed greyscale TIFF images from the FOO papers colle...\"\n</code></pre>"},{"location":"schema-metadata/","title":"Schema Metadata","text":"<p>The Command Line Interface (CLI) offers users more than just the ability to transfer and register dataset objects. It also enables the addition of metadata to describe schemas and perform basic validation of objects. As of this release, the CLI solely supports tabular datasets.</p>"},{"location":"schema-metadata/#tabular-dataset","title":"Tabular Dataset","text":"<p>To illustrate, let's consider the tabular data frame named <code>APMS_embedding_MUSIC.csv</code>. This particular dataset comprises 1026 columns. The first column, <code>Internal Experiment Identifier</code>, identifies the experiment that generated the source data, while the second column, <code>Gene Symbol</code>, contains the Gene name for the bait protien. The remaining columns, from <code>Embedding0</code> to <code>Embedding1023</code>, are a 1024 length embedding vector. The original data frame has no headers, but after consulting with a domain expert, headers are added for clarity, and based on these headers, the schema will be described.  </p> Internal Experiment Identifier Gene Symbol Embedding0 Embedding1 Embedding2 ... Embedding1023 APMS_1 RRS1 0.07591 0.161315 -0.025731 ... -0.172205 APMS_2 SNRNP70 -0.019872 0.083736 0.151332 ... 0.042429 APMS_3 RPL18 0.067353 0.099565 0.308037 ... 0.049538 APMS_4 JMJD6 0.087387 -0.17969 0.036929 ... 0.068675 APMS_5 NCAPH2 0.007115 0.118820 -0.059649 ... 0.119648 APMS_6 BSG 0.143906 -0.034937 -0.141535 ... -0.178751 APMS_7 FAM189B -0.107395 0.284882 0.065763 ... 0.044294 APMS_8 MRPS11 -0.051772 0.045301 0.08211 ... 0.079971 APMS_9 TRIM28 -0.17398 0.209120 0.021203 ... -0.092368 APMS_10 LAMP3 0.048065 0.087677 0.000867 ... 0.047628 <p>Throughout the rest of the document, we will use this tabular dataset as a guide to walk through the step-by-step process of creating, populating and validating the schema.   </p>"},{"location":"schema-metadata/#create-schema","title":"Create schema","text":"<p>To create a schema for a tabular dataset, the <code>create-tabular</code> command must be invoked, requiring a <code>name</code>, a brief <code>description</code>, a <code>separator</code> character, and an optional boolean value for <code>header</code> to specify the presence of column headers. Once created, the schema will be located in the destination specified by the <code>SCHEMA_FILE</code>.</p> <pre><code>fairscape-cli schema create-tabular [OPTIONS] SCHEMA_FILE\n\nOptions:\n  --name TEXT         [required]\n  --description TEXT  [required]\n  --guid TEXT\n  --separator TEXT    [required]\n  --header BOOLEAN\n  --help              Show this message and exit.\n</code></pre> <p>In the schema creation example below, the symbol <code>,</code> (comma) is used as the <code>separator</code> and the <code>header</code> is set to <code>False</code>. The CLI will autogenerate a value for the <code>guid</code>. </p> <pre><code>fairscape-cli schema create-tabular \\\n    --name 'APMS Embedding Schema' \\\n    --description 'Tabular format for APMS music embeddings from PPI networks from the music pipeline from the B2AI Cellmaps for AI project' \\\n    --seperator ',' \\\n    --header False \\\n    /path/to/schema_apms_music_embedding.json\n</code></pre>"},{"location":"schema-metadata/#populate-schema","title":"Populate schema","text":"<p>To populate the schema for a tabular dataset, we describe its syntactic and semantic properties through a series of unique properties, each representing a single column or an array of similar columns. To add a property, we use the <code>fairscape-cli schema add-property</code> command.</p> <p>The first step in adding a property is to choose the datatype it represents in the column or array of columns. For example, if a column represents a <code>string</code> datatype, we create a string property by using the <code>fairscape-cli schema add-property string</code> command. We can use a similar command for other datatypes as well. The CLI supports five datatypes for a tabular dataset, which are listed in the table below.</p> Datatype Description <code>string</code> Strings of text <code>number</code> Any numeric type <code>integer</code> Integral numbers <code>array</code> Ordered elements <code>boolean</code> True and False <p>After choosing the datatype, we must fill in additional information about the column or array of columns it represents. The table headers below display all available options for each datatype. For a <code>string</code> property, this includes a unique <code>name</code>, an integer value for the <code>index</code> (where 0 represents the first column, 1 represents the second, and so on), a human-readable <code>description</code>, a standard vocabulary term for the <code>value-url</code>, and a regular expression for the data <code>pattern</code> in that column. While the first three options are required, the rest are optional.</p> Datatype name index description value-url pattern items-datatype min-items max-items unique-items <code>string</code> required required required optional optional <code>number</code> required required required optional <code>integer</code> required required required optional <code>array</code> required required required optional required optional optional optional <code>boolean</code> required required required optional <p>To view all available options and arguments, including those for the string datatype, we can use the command <code>fairscape-cli schema add-property string --help</code>, which will display a complete list of options.</p> <pre><code>fairscape-cli schema add-property string [OPTIONS] SCHEMA_FILE\n\nOptions:\n  --name TEXT         [required]\n  --index INTEGER     [required]\n  --description TEXT  [required]\n  --value-url TEXT\n  --pattern TEXT\n  --help              Show this message and exit.\n</code></pre>"},{"location":"schema-metadata/#add-a-string-property","title":"Add a String Property","text":"<p>Columns index 0 and 1 have string values.  Both can be constrained with an optional regex pattern. For our first column we have the experiment identifier, and add this to the schema with the following command.</p> <pre><code>fairscape-cli schema add-property string \\\n    --name 'Experiment Identifier' \\\n    --index 0 \\\n    --description 'Identifier for the APMS experiment responsible for generating the raw PPI used to create this embedding vector' \\\n    --pattern 'APMS_[0-9]*' \\\n    ./schema_apms_music_embedding.json\n</code></pre> <p>For the second column we have Gene Symbols for values,  We can choose then to provide the optional flag <code>--value-url</code> to align these values to an ontology. Using the (EDAM ontology of bioscientific data analysis and data management)[], we can specify that these are Gene Symbols. This can be usefull for specifying the Database of a particular Gene Identifier. Which enables linking Identifiers across databases. Any ontology can be used to align data.</p> <pre><code>fairscape-cli schema add-property string \\\n    --name 'Gene Symbol' \\\n    --index 1 \\\n    --description 'Gene Symbol for the APMS bait protien' \\\n    --pattern '[A-Z0-9]*' \\\n    --value-url 'http://edamontology.org/data_1026' \\\n    ./schema_apms_music_embedding.json\n</code></pre>"},{"location":"schema-metadata/#add-an-array-property","title":"Add an Array Property","text":"<p>Instead of registering properties for 1024 individual columns we can add a property for an array of 1024 elements. We can accomplish this with a slice expression for the index. The following slice expressions are supported.</p> Slice Expression Description <code>i::</code> starting at index i to the final index <code>::i</code> starting at index 0 to index i <code>i:j</code> starting at index i to index j <p>We then must specify that the type of the data inside this array is numeric. Items are not contstrained to unique values. And that for every row we expect there to be exactly 1024 elements.</p> <pre><code>fairscape-cli schema add-property array \\\n    --name 'MUSIC APMS Embedding' \\\n    --index '2::' \\\n    --description 'Embedding Vector values for genes determined by running node2vec on APMS PPI networks. Vector has 1024 values for each bait protien' \\\n    --items-datatype 'number' \\\n    --unique-items False \\\n    --min-items 1024 \\\n    --max-items 1024 \\\n    ./schema_apms_music_embedding.json\n</code></pre>"},{"location":"schema-metadata/#generated-schema","title":"Generated schema","text":"<p>Looking at our schema we should have a json document equivalent to the following <pre><code>{\n    \"@context\": {\n        \"@vocab\": \"https://schema.org/\",\n        \"EVI\": \"https://w3,org/EVI#\"\n    },\n    \"@id\": \"ark:59852/schema-apms-music-embedding-izNjXSs\",\n    \"@type\": \"EVI:Schema\",\n    \"name\": \"APMS Embedding Schema\",    \n    \"description\": \"Tabular format for APMS music embeddings from PPI networks from the music pipeline from the B2AI Cellmaps for AI project\",    \n    \"properties\": {    \n    \"Experiment Identifier\": {    \n        \"description\": \"Identifier for the APMS experiment responsible for generating the raw PPI used to create this embedding vector\",    \n        \"index\": 0,                                 \n        \"valueURL\": null,    \n        \"type\": \"string\",    \n        \"pattern\": \"APMS_[0-9]*\" \n    },                                 \n    \"Gene Symbol\": {                                             \n        \"description\": \"Gene Symbol for the APMS bait protien\",    \n        \"index\": 1,    \n        \"valueURL\": \"http://edamontology.org/data_1026\",    \n        \"type\": \"string\",          \n        \"pattern\": \"[A-Z0-9]*\"    \n    },                                                                          \n    \"MUSIC APMS Embedding\": {                                                                \n        \"description\": \"Embedding Vector values for genes determined by running node2vec on APMS PPI networks. Vector has 1024 values for each bait protien\",    \n        \"index\": \"2::\",                                                           \n        \"valueURL\": null,    \n        \"type\": \"array\",    \n        \"maxItems\": 1024,                               \n        \"minItems\": 1024,                                    \n        \"uniqueItems\": false,                                        \n        \"items\": {    \n            \"type\": \"number\"\n            }\n        }                                                              \n    },                        \n    \"type\": \"object\",                                   \n    \"additionalProperties\": true,                                               \n    \"required\": [\"Experiment Identifier\", \"Gene Symbol\", \"MUSIC APMS Embedding\"],    \n    \"seperator\": \",\",                         \n    \"header\": false,    \n    \"examples\": []    \n}\n</code></pre></p>"},{"location":"schema-metadata/#validate-schema","title":"Validate schema","text":"<p>Now to use our schema to validate our data with</p> <pre><code>fairscape-cli schema validate \\\n    --data tests/data/APMS_embedding_MUSIC.csv \\\n    --schema ./schema_apms_music_embedding.json\n</code></pre>"},{"location":"setup/","title":"Setup","text":"<p>The CLI is compatible with Python 3.8+. Installation of the CLI requires <code>pip</code> to be installed. In order to install from the  source <code>git</code> is required.</p> <ul> <li>python 3.8+</li> <li>pip</li> <li>git</li> </ul>"},{"location":"setup/#installation","title":"Installation","text":"<p><code>fairscape-cli</code> can be installed by any of the following three options:</p>"},{"location":"setup/#install-with-pip","title":"Install with <code>pip</code>","text":"<p><code>fairscape-cli</code> is available on PyPi. Installation using pip is simple: </p> <pre><code>pip install fairscape-cli\n</code></pre>"},{"location":"setup/#install-from-the-source","title":"Install from the source","text":"<p>Clone the repository from Github </p> <pre><code>git clone https://github.com/fairscape/fairscape-cli.git\n</code></pre> <p>Go to the repository</p> <pre><code>cd fairscape-cli\n</code></pre> <p>Install using <code>pip</code></p> <pre><code>python3 -m pip install .\n</code></pre>"},{"location":"setup/#test-the-cli","title":"Test the CLI","text":"<p>Show all commands, arguments, and options</p> <pre><code>fairscape-cli --help\n</code></pre> <p>or if you cloned the repository</p> <pre><code>python3 fairscape_cli/__main__.py --help\n</code></pre> <p>To use <code>fairscape-cli</code> go to the page Getting Started.</p>"}]}